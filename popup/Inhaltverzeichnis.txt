Table of Contents
Introduction
 1.1 Background and Motivation
 1.2 Problem Statement
 1.3 Objectives of the Thesis
 1.4 Methodology
 1.5 Structure of the Thesis

Fundamentals and Technologies
 2.1 Web Browser Extensions: Concepts and Architecture
 2.2 Cross-Browser Compatibility: Standards and Constraints
 2.3 The Svelte Framework: Reactive Frontend Development
 2.4 Keycloak and Identity Management: Authentication via OAuth2/OIDC
 2.5 Stripe for Web Payments: Integration and Security

Requirements Analysis
 3.1 Functional Requirements
 3.2 Non-Functional Requirements
 3.3 Stakeholders and Use Cases
 3.4 Target Platforms and Technical Limitations

System Design
 4.1 Overall Architecture of the Extension
 4.2 Module Design and Component Structure
 4.3 Integration Strategy for Keycloak
 4.4 Integration Strategy for Stripe
 4.5 UI/UX Design with Svelte

Implementation
 5.1 Development Environment and Tools
 5.2 Building the Svelte-Based Extension
 5.3 Authentication Implementation using Keycloak
 5.4 Payment Flow Implementation with Stripe
 5.5 Cross-Browser Support: Chrome, Edge, and Safari
 5.6 Security Considerations

Testing and Evaluation
 6.1 Testing Approach and Tools
 6.2 Functional and Integration Testing
 6.3 Cross-Browser Compatibility Testing
 6.4 Performance Analysis
 6.5 Evaluation of User Experience

Discussion
 7.1 Achieved Results
 7.2 Challenges Encountered and Solutions
 7.3 Limitations of the Solution

Conclusion and Future Work
 8.1 Summary of Findings
 8.2 Critical Reflection
 8.3 Potential Improvements and Future Research

References

-----------
\section*{Extension Architecture Overview}

The browser extension is structured around three main components: \textbf{background scripts}, \textbf{content scripts}, and the \textbf{popup/UI}. Each of these plays a distinct role in the extension’s functionality and lifecycle.

\subsection*{1. Background Script}
\begin{itemize}
    \item Runs independently in the background.
    \item Manages authentication (e.g., OAuth2 via Keycloak), session storage, and cross-component communication.
    \item Does not have direct access to the DOM.
    \item Listens for browser events (e.g., tab updates, messages).
\end{itemize}

\textbf{Typical file:} \texttt{background.js}

\subsection*{2. Content Script}
\begin{itemize}
    \item Injected into specific web pages.
    \item Can read and manipulate the DOM of those pages.
    \item Communicates with the background script for operations requiring privileges.
    \item Is sandboxed and does not interfere with the page’s own JavaScript.
\end{itemize}

\textbf{Typical file:} \texttt{content.js}

\subsection*{3. Popup / UI}
\begin{itemize}
    \item The graphical user interface shown when the extension icon is clicked.
    \item Allows user interaction (e.g., logging in, triggering actions).
    \item Operates independently from content and background scripts.
    \item Can initiate communication with the background script.
\end{itemize}

\textbf{Typical files:} \texttt{popup.html}, \texttt{popup.js}, \texttt{popup.css}

\subsection*{4. Component Communication}
\begin{itemize}
    \item \textbf{Popup \textrightarrow{} Background:} via \texttt{chrome.runtime.sendMessage()}
    \item \textbf{Content \textrightarrow{} Background:} via \texttt{chrome.runtime.sendMessage()} or \texttt{chrome.tabs.sendMessage()}
    \item \textbf{Popup \textrightarrow{} Content:} indirect communication through the background script
\end{itemize}

\subsection*{5. Manifest File}
The \texttt{manifest.json} defines the extension’s structure and permissions:

\begin{verbatim}
{
  "manifest_version": 3,
  "name": "My Extension",
  "version": "1.0",
  "permissions": ["storage", "tabs"],
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"]
    }
  ],
  "action": {
    "default_popup": "popup.html"
  }
}
\end{verbatim}

\subsection*{6. Visual Overview}

\begin{center}
\begin{tikzpicture}[node distance=1.5cm, every node/.style={align=center}]
  \node (popup) [rectangle, draw, rounded corners, fill=blue!10] {Popup UI\\(\texttt{popup.html})};
  \node (background) [rectangle, draw, below=of popup, rounded corners, fill=gray!10] {Background Script\\(\texttt{background.js})};
  \node (content) [rectangle, draw, left=of background, rounded corners, fill=green!10] {Content Script\\(\texttt{content.js})};
  \node (api) [rectangle, draw, right=of background, rounded corners, fill=orange!10] {Browser APIs\\(Auth, Tabs, etc.)};

  \draw[->] (popup) -- (background);
  \draw[->] (content) -- (background);
  \draw[->] (background) -- (api);
\end{tikzpicture}
\end{center}
